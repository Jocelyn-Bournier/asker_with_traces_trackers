<?php

namespace SimpleIT\ClaireExerciseBundle\Repository;

/**
 * DirectoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DirectoryRepository extends \Doctrine\ORM\EntityRepository
{
    public function findAttempts($user,$model)
    {
        return $this->getEntityManager()->createQuery(
            "SELECT em.id FROM
            SimpleIT\ClaireExerciseBundle\Entity\CreatedExercise\Attempt a
            JOIN a.exercise ese
            JOIN ese.exerciseModel em
            WHERE a.user  = $user 
            AND em.id = $model"
        )
        ->getResult();
    }
    public function findNews($user)
    {
        $attemptedModels = $this->getEntityManager()->createQuery(
            "SELECT em.id FROM
            SimpleIT\ClaireExerciseBundle\Entity\CreatedExercise\Attempt a
            JOIN a.exercise ese
            JOIN ese.exerciseModel em
            WHERE a.user  = $user"
        )
        ->getResult();
        $qb = $this->createQueryBuilder('d')
            ->select('
                d.id as dir,
                d.name,
                u.id as user,
                m.complete as modelComplete,
                m.type as modelType,
                m.title as modelTitle,
                m.id as modelId,
                o.firstName as firstName,
                o.lastName as lastName

            ')
            ->join('d.models', 'm')
            ->join('m.owner', 'o')
            ->join('d.users', 'u')
        ;
        if (empty($attemptedModels)){
            $qb
                ->where(
                    $qb->expr()->eq('u.id', ':user')
                    )
                ->setParameter('user', $user)
            ;
        }else{
            $qb
                ->where(
                    $qb->expr()->andX(
                        $qb->expr()->eq('u.id', ':user'),
                        $qb->expr()->notIn('m.id', ':attemptedModels')
                    )
                )
                ->setParameter('user', $user)
                ->setParameter('attemptedModels', $attemptedModels)
            ;
        }
        return $qb
            ->getQuery()
            ->getResult()
        ;
    }
    public function findBymodel($model)
    {
        return $this->createQueryBuilder('d')
            ->select('d.id, d.name')
            ->join('d.models', 'm')
            ->where('m.id = :model')
            ->setParameter('model', $model)
            ->getQuery()
            ->getArrayResult()
        ;
    }

    public function findAllApi()
    {
        return $this->createQueryBuilder('d')
            ->select('d.id, d.name')
            ->getQuery()
            ->getArrayResult()
        ;
    }

    public function findParents()
    {
        $parents= $this->createQueryBuilder('d')
            ->select('d.id, d.name, count(m.id) as models')
            ->leftJoin('d.models', 'm')
            ->where('d.parent IS NULL')
            ->groupBy('d.name')
            ->addGroupBy('d.id')
            ->getQuery()
            ->getArrayResult();
        foreach($parents as $key =>  $parent){
            $parents[$key]['models'] += $this->
                countModelChildrens($parent['id'])
                [0]['total']
            ;
            $parents[$key]['users'] = $this->
                countUsers($parent['id'])
                [0]['total']
            ;
        }
        return $parents;
    }
    public function findMine($user)
    {
        //selection des parents
        $parents = $this->createQueryBuilder('d')
            ->select('d.id')
            ->join('d.users', 'u')
            ->where('u.id = :user')
            ->andWhere('d.parent IS NULL')
            ->setParameter('user', $user)
            ->getQuery()
            ->getArrayResult();

        //recuperation des ids
        $ids = array_column($parents,"id");
        $qb =$this->createQueryBuilder('d')
            ->select('d.id, d.code, d.name, p.id as idp, count(m.id) as models ')
            ->leftJoin('d.users', 'u')
            ->leftJoin('d.parent', 'p')
            ->leftJoin('d.models', 'm')
        ;
        return $qb->where(
                $qb->expr()->orX(
                    $qb->expr()->in('d.parent',$ids),
                    $qb->expr()->eq('u.id',':user')
                )
            )
            ->setParameter('user', $user)
            ->groupBy('d.id')
            ->addGroupBy('d.name')
            ->addGroupBy('idp')
            ->getQuery()
            ->getResult();
    }
    public function findChildrens($parent)
    {
        return $this->createQueryBuilder('d')
            ->select('d.id, d.name')
            ->where('d.parent = :parent')
            ->setParameter('parent', $parent)
            ->getQuery()
            ->getResult();
    }
    public function countChildrens($parent)
    {
        return $this->createQueryBuilder('d')
            ->select('count(d.id) as total')
            ->where('d.parent = :parent')
            ->setParameter('parent', $parent)
            ->getQuery()
            ->getResult();
    }

    public function countModelChildrens($parent)
    {
        return $this->createQueryBuilder('d')
            ->select('count(m.id) as total')
            ->join('d.models', 'm')
            ->where('d.parent = :parent')
            ->setParameter('parent', $parent)
            ->getQuery()
            ->getResult();
    }

    public function countUsers($id)
    {
        return $this->createQueryBuilder('d')
            ->select('count(u.id) as total')
            ->join('d.users', 'u')
            ->where('d.id = :id')
            ->setParameter('id', $id)
            ->getQuery()
            ->getResult();
    }
    public function countStudents($id)
    {
        return $this->createQueryBuilder('d')
            ->select('count(u.id) as total')
            ->join('d.users', 'u')
            ->join('u.roles', 'r')
            ->where('d.id = :id')
            ->andWhere("r.name = 'ROLE_USER'")
            ->setParameter('id', $id)
            ->getQuery()
            ->getResult();
    }
}
