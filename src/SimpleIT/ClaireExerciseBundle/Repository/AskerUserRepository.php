<?php

namespace SimpleIT\ClaireExerciseBundle\Repository;

/**
 * AskerUser2Repository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AskerUserRepository extends \Doctrine\ORM\EntityRepository
{

    public function nativeAll(){
        $sql = "
            SELECT  au.id,au.username, au.isEnable, au.isLdap, group_concat(r.public) as roles
            FROM asker_user au
            JOIN asker_user_role aur
            ON aur.asker_user_id = au.id
            JOIN role r
            ON aur.role_id = r.id
            GROUP BY au.username
            ORDER BY au.id
        ";
       $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
       $stmt->execute();
       return $stmt->fetchAll();
       # new version is doctine is up to date
       #return $stmt->executeQuery()->fetchAllAssociative();

    }
    public function findTeachers()
    {
        return $this->createQueryBuilder('a')
            ->select('a.id, a.username')
            ->join('a.roles', 'r')
            ->where('r.name = :name')
            ->orWhere('r.name = :admin')
            ->setParameter('name', 'ROLE_WS_CREATOR')
            ->setParameter('admin', 'ROLE_ADMIN')
            ->distinct()
            ->orderBy('a.username')
            ->getQuery()
            ->getArrayResult()
        ;

    }

    public function getArrayStudents($directory, $startDate, $endDate)
    {
        $teachers =$this->findTeachers();
        $ids = array_column($teachers,"id");
        $qb = $this->createQueryBuilder('a')
                    ->select('a.id, a.username')
                    ->join('a.directories', 'aud')
                    #->join('aud.directory', 'd')
        ;
        return $qb
            ->where(
                $qb->expr()->andX(
                    $qb->expr()->notIn('a.id', $ids),
                    $qb->expr()->eq('aud.directory',':directory'),
                    $qb->expr()->between('aud.startDate', ':startDate', ':endDate')
                )
            )
            ->setParameter('directory', $directory)
            ->setParameter('startDate', $startDate)
            ->setParameter('endDate', $endDate)
            ->getQuery()
            ->getArrayResult()
        ;

    }

}
